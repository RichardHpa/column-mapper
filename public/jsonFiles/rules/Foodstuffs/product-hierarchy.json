{
	"SellingUnitOfMeasureBase": {
		"Name": "SellingUnitOfMeasureBase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "IsBaseConsumerUnit",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "(!IsTradeItemAVariableUnitBaseUnit && input == \"EA\") || (IsTradeItemAVariableUnitBaseUnit && input == \"KGM\")",
						"ValidationMessage": "{(!IsTradeItemAVariableUnitBaseUnit ? \"If the unit is not a variable Unit, then Selling unit of measure should be Each\" : \"Variable Weight product must be sold by KG\")}."
					}
				]
			}
		}
	},
	"SellingUnitOfMeasureInner": {
		"Name": "SellingUnitOfMeasureInner",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "IsInnerConsumerUnit",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "(!IsTradeItemAVariableUnitInner && input == \"EA\") || (IsTradeItemAVariableUnitInner && input == \"KGM\")",
						"ValidationMessage": "{(!IsTradeItemAVariableUnitInner ? \"If the unit is not a variable Unit, then Selling unit of measure should be Each\" : \"Variable Weight product must be sold by KG\")}."
					}
				]
			}
		}
	},
	"SellingUnitOfMeasureCase": {
		"Name": "SellingUnitOfMeasureCase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "IsCaseConsumerUnit",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "(!IsTradeItemAVariableUnitCase && input == \"EA\") || (IsTradeItemAVariableUnitCase && input == \"KGM\")",
						"ValidationMessage": "{(!IsTradeItemAVariableUnitCase ? \"If the unit is not a variable Unit, then Selling unit of measure should be Each\" : \"Variable Weight product must be sold by KG\")}."
					}
				]
			}
		}
	},
	"HeightBase": {
		"Name": "HeightBase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "true",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "isnull(Hierarchy_GlobalTradeItemNumberBaseUnit) || (!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberBaseUnit))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(HeightInner) || isnull(Hierarchy_GlobalTradeItemNumberInner) || input <= HeightInner || input <= WidthInner || input <= DepthInner",
						"ValidationMessage": "This should be smaller than height, width, and depth of inner unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(HeightCase) || isnull(Hierarchy_GlobalTradeItemNumberCase) || input <= HeightCase || input <= WidthCase || input <= DepthCase",
						"ValidationMessage": "This should be smaller than height, width, and depth of case unit."
					}
				]
			}
		}
	},
	"HeightInner": {
		"Name": "HeightInner",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberInner)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "(!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberInner))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberCase) || isnull(HeightCase) || input <= HeightCase || input <= WidthCase || input <= DepthCase",
						"ValidationMessage": "This should be smaller than height, width, and depth of case unit."
					}
				]
			}
		}
	},
	"HeightCase": {
		"Name": "HeightCase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberCase)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "(!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberCase))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					}
				]
			}
		}
	},
	"IsBaseNesting": {
		"Name": "IsBaseNesting",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "true",
						"IsEnabled": "true"
					}
				]
			}
		}
	},
	"NestingHeightBaseUnit": {
		"Name": "NestingHeightBaseUnit",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "IsBaseNesting",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input < HeightBase",
						"ValidationMessage": "Must be smaller than the base height."
					}
				]
			}
		}
	},
	"WidthBase": {
		"Name": "WidthBase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "true",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "!isnull(input)",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(DepthBase) || IsBaseConsumerUnit || (!IsBaseConsumerUnit && input <= DepthBase)",
						"ValidationMessage": "Depth must be greater than width for this unit. Please swap the values for depth & width around."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberInner) || isnull(WidthInner) || isnull(HeightInner) || isnull(DepthInner) || input <= HeightInner || input <= WidthInner || input <= DepthInner",
						"ValidationMessage": "This should be smaller than height, width, and depth of inner unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberCase) || isnull(WidthCase) || isnull(HeightCase) || isnull(DepthCase) || input <= HeightCase || input <= WidthCase || input <= DepthCase",
						"ValidationMessage": "This should be smaller than height, width, and depth of case unit."
					}
				]
			}
		}
	},
	"WidthInner": {
		"Name": "WidthInner",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberInner)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "(!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberInner))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(DepthInner) || IsInnerConsumerUnit || (!IsInnerConsumerUnit && input <= DepthInner)",
						"ValidationMessage": "Depth must be greater than width for this unit. Please swap the values for Depth & width around."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberCase) || isnull(WidthCase) || input <= HeightCase || input <= WidthCase || input <= DepthCase",
						"ValidationMessage": "This should be smaller than height, width, and Depth of case unit."
					}
				]
			}
		}
	},
	"WidthCase": {
		"Name": "WidthCase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberCase)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "(!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberCase))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(DepthCase) || IsCaseConsumerUnit || (!IsCaseConsumerUnit && input <= DepthCase)",
						"ValidationMessage": "Depth must be greater than width for this unit. Please swap the values for Depth & width around."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					}
				]
			}
		}
	},
	"DepthBase": {
		"Name": "DepthBase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "true",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "isnull(Hierarchy_GlobalTradeItemNumberBaseUnit) || (!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberBaseUnit))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberInner) || isnull(DepthInner) || input <= HeightInner || input <= WidthInner || input <= DepthInner",
						"ValidationMessage": "This should be smaller than height, width, and depth of inner unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberCase) || isnull(DepthCase) || input <= HeightCase || input <= WidthCase || input <= DepthCase",
						"ValidationMessage": "This should be smaller than height, width, and depth of case unit."
					}
				]
			}
		}
	},
	"DepthInner": {
		"Name": "DepthInner",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberInner)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "!isnull(input)",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberCase) || isnull(HeightCase) || input <= HeightCase || input <= WidthCase || input <= DepthCase",
						"ValidationMessage": "This should be smaller than height, width, and depth of case unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(HeightCase) || isnull(WidthCase) || isnull(DepthCase) || (HeightInner * WidthInner * input) > (HeightBase * WidthBase * DepthBase * NumberBaseUnitInner * 0.8)",
						"ValidationMessage": "The dimensions appear to be too small based on the dimensions of the base unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(HeightCase) || isnull(WidthCase) || isnull(DepthCase) || (HeightInner * WidthInner * input) < (HeightBase * WidthBase * DepthBase * NumberBaseUnitInner * 1.5)",
						"ValidationMessage": "The dimensions appear to be too large based on the dimensions of the base unit."
					}
				]
			}
		}
	},
	"DepthCase": {
		"Name": "DepthCase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberCase)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 0",
						"ValidationMessage": "No more than 0 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "!isnull(input)",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(DepthInner) || input >= DepthInner",
						"ValidationMessage": "Must be greater than or equal to depth of inner."
					},
					{
						"IsError": false,
						"IsValid": "isnull(HeightBase) || isnull(WidthBase) || isnull(DepthBase) || isnull(input) || (HeightCase * WidthCase * input) > (HeightBase * WidthBase * DepthBase * NumberBaseUnitCase * 0.8)",
						"ValidationMessage": "The dimensions appear to be too small based on the dimensions of the base unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(Hierarchy_GlobalTradeItemNumberInner) || isnull(HeightInner) || isnull(WidthInner) || isnull(DepthInner) || (HeightCase * WidthCase * input) > (HeightInner * WidthInner * DepthInner * (NumberBaseUnitCase/NumberBaseUnitInner) * 0.8)",
						"ValidationMessage": "The dimensions appear to be too small based on the dimensions of the inner."
					},
					{
						"IsError": false,
						"IsValid": "isnull(HeightBase) || isnull(WidthBase) || isnull(DepthBase) ||(HeightCase * WidthCase * input) < (HeightBase * WidthBase * DepthBase * NumberBaseUnitCase * 1.5)",
						"ValidationMessage": "The dimensions appear to be too large based on the dimension of the base unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(Hierarchy_GlobalTradeItemNumberInner) || isnull(HeightInner) || isnull(WidthInner) || isnull(DepthInner) || (HeightCase * WidthCase * input) < (HeightInner * WidthInner * DepthInner * (NumberBaseUnitCase/NumberBaseUnitInner) * 1.5)",
						"ValidationMessage": "The dimensions appear to be too large based on the dimension of the inner."
					}
				]
			}
		}
	},
	"NetWeightBase": {
		"Name": "NetWeightBase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "true",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 3",
						"ValidationMessage": "No more than 3 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "isnull(Hierarchy_GlobalTradeItemNumberBaseUnit) || (!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberBaseUnit))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input > 0",
						"ValidationMessage": "Must be greater than 0."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(GrossWeightBaseUnit) || input <= GrossWeightBaseUnit",
						"ValidationMessage": "Must be less than or equal to the Gross Weight of Base Unit."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(Hierarchy_NetContentUom) || isnull(Hierarchy_NetContentValue) || Hierarchy_NetContentUom != \"KGM\" || (Hierarchy_NetContentUom == \"KGM\" && input >= Hierarchy_NetContentValue)",
						"ValidationMessage": "Must be greater than or equal to Net Content."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(Hierarchy_NetContentUom) || isnull(Hierarchy_NetContentValue) || Hierarchy_NetContentUom != \"GRM\" || (Hierarchy_NetContentUom == \"GRM\" && input >= (Hierarchy_NetContentValue/1000.0))",
						"ValidationMessage": "Must be greater than or equal to Net Content."
					}
				]
			}
		}
	},
	"NetWeightInner": {
		"Name": "NetWeightInner",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberInner)",
						"IsEnabled": "false"
					}
				]
			}
		}
	},
	"NetWeightCase": {
		"Name": "NetWeightCase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberCase)",
						"IsEnabled": "false"
					}
				]
			}
		}
	},
	"GrossWeightInner": {
		"Name": "GrossWeightInner",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberInner)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 3",
						"ValidationMessage": "No more than 3 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "!isnull(input)",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input >= (NumberBaseUnitInner * GrossWeightBaseUnit)",
						"ValidationMessage": "Must be greater than equal to {NumberBaseUnitInner * GrossWeightBaseUnit}."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || input != (GrossWeightBaseUnit * NumberBaseUnitInner)",
						"ValidationMessage": "Gross weight must include weight of packaging."
					}
				]
			}
		}
	},
	"GrossWeightBaseUnit": {
		"Name": "GrossWeightBase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "true",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 3",
						"ValidationMessage": "No more than 3 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "isnull(Hierarchy_GlobalTradeItemNumberBaseUnit) || (!isnull(input) && !isnull(Hierarchy_GlobalTradeItemNumberBaseUnit))",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || input >= NetWeightBase",
						"ValidationMessage": "Must be greater than the Net Weight of Base Unit."
					},
					{
						"IsError": false,
						"IsValid": "isnull(input) || input != NetWeightBase",
						"ValidationMessage": "Gross weight must include weight of packaging."
					}
				]
			}
		}
	},
	"GrossWeightCase": {
		"Name": "GrossWeightCase",
		"Conditions": {
			"Foodstuffs": {
				"ViewConditions": [
					{
						"IsVisible": "!isnull(Hierarchy_GlobalTradeItemNumberCase)",
						"IsEnabled": "true"
					}
				],
				"ValidationConditions": [
					{
						"IsError": true,
						"IsValid": "isnull(input) || getdecimalpoint(input) <= 3",
						"ValidationMessage": "No more than 3 decimal places."
					},
					{
						"IsError": true,
						"IsValid": "!isnull(input)",
						"ValidationMessage": "This is required."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || !isnull(Hierarchy_GlobalTradeItemNumberInner) || isnull(NumberBaseUnitCase) || isnull(GrossWeightBaseUnit) || input >= (NumberBaseUnitCase * GrossWeightBaseUnit)",
						"ValidationMessage": "Must be greater than or equal to {NumberBaseUnitCase * GrossWeightBaseUnit}."
					},
					{
						"IsError": true,
						"IsValid": "isnull(input) || isnull(Hierarchy_GlobalTradeItemNumberInner) ||  isnull(NumberBaseUnitInner) || isnull(NumberBaseUnitCase) || isnull(GrossWeightInner) || input >= ((NumberBaseUnitCase/NumberBaseUnitInner) * GrossWeightInner)",
						"ValidationMessage": "Must be greater than or equal to {(NumberBaseUnitCase/NumberBaseUnitInner) * GrossWeightInner}"
					},
					{
						"IsError": false,
						"IsValid": "isnull(GrossWeightInner) || input != (GrossWeightInner * NumberBaseUnitCase/NumberBaseUnitInner)",
						"ValidationMessage": "Gross weight must include weight of packaging."
					},
					{
						"IsError": false,
						"IsValid": "isnull(GrossWeightBaseUnit) || input != (GrossWeightBaseUnit * NumberBaseUnitCase)",
						"ValidationMessage": "Gross weight must include weight of packaging."
					}
				]
			}
		}
	}
}
